ARCHITECTURE rtl OF debouncer IS
	SIGNAL sng_1, sng_2, sng_3, sng_4, out_1, out_2, out_3, out_4 : std_logic;

BEGIN


sng_1 <= button AND NOT clear;
dff1:PROCESS (clk) IS
BEGIN
	IF (rising_edge(clk)) THEN
		out_1 <= sng_1;	
	END IF;
END PROCESS dff1;



sng_2 <= out_1 AND NOT clear; 
dff2:PROCESS (clk) IS
BEGIN
	IF (rising_edge(clk)) THEN
		out_2 <= sng_2;
	END IF;
END PROCESS dff2;



sgn_3 <= out_2 AND NOT clear;
dff3:PROCESS (clk) IS
BEGIN
	IF (rising_edge(clk)) THEN
		out_3 <= sng_3;
	END IF;
END PROCESS dff3;


dff4:PROCESS (clk) IS
BEGIN
	IF (rising_edge(clk)) THEN
		out_4 <= ((out_2 AND NOT out_3) OR out_4) AND NOT clear;
		button_o <= out_4;

		
	END IF;
END PROCESS dff4;

end architecture rtl; 




ARCHITECTURE rtl OF debouncer IS
	SIGNAL out_1, out_2, out_3, out_4 : std_logic;

BEGIN

dff1:PROCESS (clk) IS
BEGIN
	IF (clear = '1') THEN
		button_o <= '0';
	ELSIF (rising_edge(clk)) THEN
		out_1 <= button AND NOT clear;
		out_2 <= out_1 AND NOT clear;
		out_3 <= out_2 AND NOT clear;
		out_4 <= ((out_2 AND NOT out_3) OR out_4) AND NOT clear;
		button_o <= out_4;
	END IF;
END PROCESS dff1;

end architecture rtl; 